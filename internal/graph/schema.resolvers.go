package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
    "bytes"
    "context"
    "fmt"
    "io"
    "mime/multipart"
    "net/http"
    "strings"
    "time"

    "github.com/99designs/gqlgen/graphql"
    "github.com/unobeswarch/businesslogic/internal/graph/generated"
    "github.com/unobeswarch/businesslogic/internal/graph/model"
)

// CreateDiagnostic is the resolver for the createDiagnostic field.
func (r *mutationResolver) CreateDiagnostic(ctx context.Context, idPrediagnostico string, input model.DiagnosticInput) (*model.DiagnosticResponse, error) {
    // Extraer token de autorización del contexto/headers
    authHeader := ""
    if authValue := ctx.Value("Authorization"); authValue != nil {
        if authStr, ok := authValue.(string); ok {
            authHeader = authStr
        }
    }

    // Validar token y rol de doctor
    userClaims, err := r.Resolver.AuthSrv.ValidateTokenAndRole(ctx, authHeader, "doctor")
    if err != nil {
        return &model.DiagnosticResponse{
            Success: false,
            Message: fmt.Sprintf("Acceso denegado: %v", err),
        }, nil
    }

    fmt.Printf("Doctor autorizado creando diagnóstico: %s (%s)\n", userClaims.Email, userClaims.UserID)

    // Llamar al servicio de diagnóstico
    result, err := r.Resolver.DiagnosticSrv.CreateDiagnostic(idPrediagnostico, input.Aprobacion, input.Comentario)
    if err != nil {
        return &model.DiagnosticResponse{
            Success: false,
            Message: fmt.Sprintf("Error interno: %v", err),
        }, nil
    }

    return &model.DiagnosticResponse{
        Success:      result.Success,
        Message:      result.Message,
        DiagnosticID: &result.DiagnosticID,
    }, nil
}

// UploadImage is the resolver for the uploadImage field.
func (r *mutationResolver) UploadImage(ctx context.Context, imagen graphql.Upload) (bool, error) {
    // Extraer token de autorización del contexto/headers
    authHeader := ""
    if authValue := ctx.Value("Authorization"); authValue != nil {
        if authStr, ok := authValue.(string); ok {
            authHeader = authStr
        }
    }

    userClaims, err := r.Resolver.AuthSrv.ValidateTokenAndRole(ctx, authHeader, "paciente")
    if err != nil {
        return false, fmt.Errorf("acceso denegado")
    }

    if !strings.HasSuffix(strings.ToLower(imagen.Filename), ".jpg") {
        return false, fmt.Errorf("solo se permiten archivos con extensión .jpg")
    }

    body := &bytes.Buffer{}
    writer := multipart.NewWriter(body)
    _ = writer.WriteField("user_id", userClaims.UserID)
    part, err := writer.CreateFormFile("imagen", imagen.Filename)

    if err != nil {
        return false, err
    }
    _, err = io.Copy(part, imagen.File)
    if err != nil {
        return false, err
    }

    writer.Close()

    req, err := http.NewRequest("POST", "http://localhost:8000/prediagnostic/process", body)
    if err != nil {
        return false, err
    }

    req.Header.Set("Content-Type", writer.FormDataContentType())

    client := &http.Client{Timeout: 30 * time.Second}
    resp, err := client.Do(req)

    if err != nil {
        return false, err
    }

    defer resp.Body.Close()

    if resp.StatusCode != http.StatusOK {
        return false, fmt.Errorf("Error asociado a prediagnostic: %s", resp.Status)
    }

    return true, nil
}

// GetPreDiagnostic is the resolver for the getPreDiagnostic field.
func (r *queryResolver) GetPreDiagnostic(ctx context.Context, id string) (*model.PreDiagnostic, error) {
	fmt.Println("Buscando prediagnostic con ID:", id)
	return r.Resolver.PrediagnosticSrv.GetPreDiagnosticByID(id)
}

// GetCases is the resolver for the getCases field.
func (r *queryResolver) GetCases(ctx context.Context) ([]*model.Case, error) {
	// Extraer token de autorización del contexto/headers
	authHeader := ""
	if authValue := ctx.Value("Authorization"); authValue != nil {
		if authStr, ok := authValue.(string); ok {
			authHeader = authStr
		}
	}

	// Validar token y rol de doctor
	userClaims, err := r.Resolver.AuthSrv.ValidateTokenAndRole(ctx, authHeader, "doctor")
	if err != nil {
		return nil, fmt.Errorf("acceso denegado: %w", err)
	}

	fmt.Printf("Acceso autorizado para doctor: %s (%s)\n", userClaims.Email, userClaims.UserID)

	// Obtener casos del servicio
	cases, err := r.Resolver.CaseSrv.GetAllCases()
	if err != nil {
		return nil, fmt.Errorf("error obteniendo casos: %w", err)
	}

	fmt.Printf("Se encontraron %d casos\n", len(cases))
	return cases, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
