package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"fmt"

	"github.com/unobeswarch/businesslogic/internal/graph/generated"
	"github.com/unobeswarch/businesslogic/internal/graph/model"
)

// GetPreDiagnostic is the resolver for the getPreDiagnostic field.
func (r *queryResolver) GetPreDiagnostic(ctx context.Context, id string) (*model.PreDiagnostic, error) {
	fmt.Println("Buscando prediagnostic con ID:", id)
	return r.Resolver.PrediagnosticSrv.GetPreDiagnosticByID(id)
}

// GetCases is the resolver for the getCases field.
func (r *queryResolver) GetCases(ctx context.Context) ([]*model.Case, error) {
	// Extraer token de autorización del contexto/headers
	authHeader := ""
	if authValue := ctx.Value("Authorization"); authValue != nil {
		if authStr, ok := authValue.(string); ok {
			authHeader = authStr
		}
	}

	// Validar token y rol de doctor
	userClaims, err := r.Resolver.AuthSrv.ValidateTokenAndRole(ctx, authHeader, "doctor")
	if err != nil {
		return nil, fmt.Errorf("acceso denegado: %w", err)
	}

	fmt.Printf("Acceso autorizado para doctor: %s (%s)\n", userClaims.Email, userClaims.UserID)

	// Obtener casos del servicio
	cases, err := r.Resolver.CaseSrv.GetAllCases()
	if err != nil {
		return nil, fmt.Errorf("error obteniendo casos: %w", err)
	}

	fmt.Printf("Se encontraron %d casos\n", len(cases))
	return cases, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// CaseDetail resolver - específico para HU7
func (r *queryResolver) CaseDetail(ctx context.Context, id string) (*model.CaseDetail, error) {
	// Obtener información del usuario autenticado desde JWT token
	userID, ok := ctx.Value("user_id").(string)
	if !ok {
		return nil, fmt.Errorf("usuario no autenticado")
	}

	userRole, ok := ctx.Value("role").(string)
	if !ok || userRole != "paciente" {
		return nil, fmt.Errorf("acceso denegado: solo pacientes pueden ver detalles")
	}

	// Llamar al CaseService para obtener detalles
	// El service internamente:
	// 1. Valida que el caso pertenezca al usuario
	// 2. Llama REST APIs del servicio Python
	// 3. Consolida datos de prediagnóstico + diagnóstico médico
	caseDetail, err := r.Resolver.CaseSrv.GetCaseDetail(id, userID)
	if err != nil {
		return nil, fmt.Errorf("error obteniendo detalle del caso: %w", err)
	}

	return caseDetail, nil
}
