package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/unobeswarch/businesslogic/internal/graph/generated"
	"github.com/unobeswarch/businesslogic/internal/graph/model"
)

// CreateDiagnostic is the resolver for the createDiagnostic field.
func (r *mutationResolver) CreateDiagnostic(ctx context.Context, idPrediagnostico string, input model.DiagnosticInput) (*model.DiagnosticResponse, error) {
	// Extraer token de autorizaci贸n del contexto/headers
	authHeader := ""
	if authValue := ctx.Value("Authorization"); authValue != nil {
		if authStr, ok := authValue.(string); ok {
			authHeader = authStr
		}
	}

	// Validar token y rol de doctor
	userClaims, err := r.Resolver.AuthSrv.ValidateTokenAndRole(ctx, authHeader, "doctor")
	if err != nil {
		return &model.DiagnosticResponse{
			Success: false,
			Message: fmt.Sprintf("Acceso denegado: %v", err),
		}, nil
	}

	fmt.Printf("Doctor autorizado creando diagn贸stico: %s (%s)\n", userClaims.Email, userClaims.UserID)

	// Llamar al servicio de diagn贸stico
	result, err := r.Resolver.DiagnosticSrv.CreateDiagnostic(idPrediagnostico, input.Aprobacion, input.Comentario)
	if err != nil {
		return &model.DiagnosticResponse{
			Success: false,
			Message: fmt.Sprintf("Error interno: %v", err),
		}, nil
	}

	return &model.DiagnosticResponse{
		Success:      result.Success,
		Message:      result.Message,
		DiagnosticID: &result.DiagnosticID,
	}, nil
}

// GetPreDiagnostic is the resolver for the getPreDiagnostic field.
func (r *queryResolver) GetPreDiagnostic(ctx context.Context, id string) (*model.PreDiagnostic, error) {
	fmt.Println("Buscando prediagnostic con ID:", id)
	return r.Resolver.PrediagnosticSrv.GetPreDiagnosticByID(id)
}

// GetCases is the resolver for the getCases field.
func (r *queryResolver) GetCases(ctx context.Context) ([]*model.Case, error) {
	// Extraer token de autorizaci贸n del contexto/headers
	authHeader := ""
	if authValue := ctx.Value("Authorization"); authValue != nil {
		if authStr, ok := authValue.(string); ok {
			authHeader = authStr
		}
	}

	// Validar token y rol de doctor
	userClaims, err := r.Resolver.AuthSrv.ValidateTokenAndRole(ctx, authHeader, "doctor")
	if err != nil {
		return nil, fmt.Errorf("acceso denegado: %w", err)
	}

	fmt.Printf("Acceso autorizado para doctor: %s (%s)\n", userClaims.Email, userClaims.UserID)

	// Obtener casos del servicio
	cases, err := r.Resolver.CaseSrv.GetAllCases()
	if err != nil {
		return nil, fmt.Errorf("error obteniendo casos: %w", err)
	}

	fmt.Printf("Se encontraron %d casos\n", len(cases))
	return cases, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
